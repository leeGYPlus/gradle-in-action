//import javax.inject.Inject

ext.versionFile = file('version.properties')

// 这里有个需要注意的点：如果完全没有关系的 task ，在配置阶段，其执行顺序为在文件中的顺序,所以 loadVersion 需要在其他 task 前面，定义
// 因为其他 task 需要 使用到 loadVersion 执行的结果。
task loadVersion {
    project.version = readVersion()
}

ProjectVersion readVersion() {
    logger.quiet 'Reading the version file.'

    if (!versionFile.exists()) {
        throw new GradleException("Required version file does not exit: $versionFile.canonicalPath")
    }

    Properties versionProps = new Properties()

    versionFile.withInputStream { stream ->
        versionProps.load(stream)
    }

    new ProjectVersion(versionProps.major.toInteger(), versionProps.minor.toInteger(), versionProps.release.toBoolean())
}


class ReleaseVersionTask extends DefaultTask{

    // 通过注解声明 task 的输入和输出
    @Input Boolean release
    @OutputFile
    File destFile

    // 在构造器中设置 task 的 group 和 description 属性
    ReleaseVersionTask(){
        group = 'versioning'
        description = 'Make project a release version.'
    }

    // 通过注解声明被执行的方法
    @TaskAction
    void start(){
        project.version.release = true
        ant.propertyfile(file: destFile) {
            entry(key: 'release', type: 'string', operation: '=', value: 'true')
        }
    }
}

task makeReleaseVersion(type: ReleaseVersionTask){
    // 为 ReleaseVersionTask 的属性赋值，而前提是获得 version，
    // 在构建配置阶段执行 loadVersion 的配置，对 version 重新赋值，
    // 所以 version 的值为从 readVersion 中获得。
    release = version.release
    destFile = versionFile
}

// 执行此 task
task printlnVersion {
    println version

    doLast {
        println 'doLast'
    }
}



class ProjectVersion {
    Integer major
    Integer minor
    Boolean release

    ProjectVersion(Integer major, Integer minor) {
        this.major = major
        this.minor = minor
        this.release = Boolean.FALSE
    }

    ProjectVersion(Integer major, Integer minor, Boolean release) {
        this(major, minor)
        this.release = release
    }


    @Override
    public String toString() {
        return "ProjectVersion{" +
                "major=" + major +
                ", minor=" + minor +
                ", release=" + release +
                '}';
    }
}

task two{
    println 'two'
}

task one{
    println 'one'
}

