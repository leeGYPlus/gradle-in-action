// 定义变量
ext.versionFile = file('version.properties')

task loadVersion {
    println 'loadVersion'
    project.version = readVersion()
}

ProjectVersion readVersion() {
    logger.quiet 'Read the version of Version file'
    if (!versionFile.exists()) {
        throw new GradleScriptException("File Not Exist.")
    }
    Properties versionProps = new Properties()

    versionFile.withInputStream {
        stream -> versionProps.load(stream)
    }
    new ProjectVersion(versionProps.major.toInteger(), versionProps.minor.toInteger(), versionProps.release.toBoolean())
}

//version = new ProjectVersion(0,1)

/**
 * gradle 的生命周期：初始化、配置、执行 task
 *
 * 在执行 printlnVersion 时，虽然其他的 task 与该 Task 没有直接的关系（这些没有定义动作的 Task 称为 task 配置），
 * 但是在配置阶段，所有的 Task 中代码中非 action 的部分都会被执行，
 * 所以 println version 在配置阶段就已经被执行，打印出结果，而其 action 会在执行阶段执行，具体可以看 打印结果
 */

/**
 * 配置阶段
 * > Configure project :
 * loadVersion
 * Read the version of Version file
 * ProjectVersion{major=0, minor=1, release=false}*
 * 执行阶段
 * > Task :printlnVersion
 * doLast
 *
 */

// 执行此 task
task printlnVersion {
    println version

    doLast {
        println 'doLast'
    }
}

// 执行该 task，对相应的属性设置值，构建该 task 后，再次执行 printlnVersion ，则会发现设置的值发生变化
task makeReleaseVersion(group: 'versioning', description: 'make a release version for project') {
    version.release = true
    ant.propertyfile(file: versionFile) {
        entry(key: 'release', type: 'string', operation: '=', value: 'true')
    }
}

// 使用 inputs 和 outputs 实现 task 的增量式构建
//task makeReleaseVersionTest(group: 'versioning', description: 'make a release version for project') {
//
//    println version.release
//    println versionFile
//    inputs.property('release', version.release)
//    outputs.file versionFile
//    println 'makeReleaseVersionTest'
//    doLast {
//        println 'makeReleaseVersionTest doLast'
//        version.release = true
//        ant.propertyfile(file: versionFile) {
//            entry(key: 'release', type: 'string', operation: '=', value: 'true')
//        }
//    }

//}

task makeReleaseVersionCopy(group: 'versioning', description: 'Makes project a release version.') {
    inputs.property('release', version.release)
    outputs.file versionFile

    doLast {
        version.release = true
        ant.propertyfile(file: versionFile) {
            entry(key: 'release', type: 'string', operation: '=', value: 'true')
        }
    }
}


class ProjectVersion {
    Integer major
    Integer minor
    Boolean release

    ProjectVersion(Integer major, Integer minor) {
        this.major = major
        this.minor = minor
        this.release = Boolean.FALSE
    }

    ProjectVersion(Integer major, Integer minor, Boolean release) {
        this.major = major
        this.minor = minor
        this.release = release
    }


    @Override
    public String toString() {
        return "ProjectVersion{" +
                "major=" + major +
                ", minor=" + minor +
                ", release=" + release +
                '}';
    }
}
